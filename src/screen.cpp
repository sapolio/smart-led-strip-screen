#include <screen.h>

CRGB leds[NUM_LEDS];

void initScreen() {
  FastLED.addLeds<LED_TYPE, LED_PIN, COLOR_ORDER>(leds, NUM_LEDS);
  FastLED.setBrightness(BRIGHTNESS);
};
void showScreen() {
  FastLED.show();
}
void clearAll() {
  FastLED.clear();
};
const int ledNumMap[] = {
  14, 15, 44, 45, 74, 75, 104, 105, 134, 135, 164, 165, 194, 195, 224, 225, 254, 255, 284, 285,
  13, 16, 43, 46, 73, 76, 103, 106, 133, 136, 163, 166, 193, 196, 223, 226, 253, 256, 283, 286,
  12, 17, 42, 47, 72, 77, 102, 107, 132, 137, 162, 167, 192, 197, 222, 227, 252, 257, 282, 287,
  11, 18, 41, 48, 71, 78, 101, 108, 131, 138, 161, 168, 191, 198, 221, 228, 251, 258, 281, 288,
  10, 19, 40, 49, 70, 79, 100, 109, 130, 139, 160, 169, 190, 199, 220, 229, 250, 259, 280, 289,
   9, 20, 39, 50, 69, 80,  99, 110, 129, 140, 159, 170, 189, 200, 219, 230, 249, 260, 279, 290,
   8, 21, 38, 51, 68, 81,  98, 111, 128, 141, 158, 171, 188, 201, 218, 231, 248, 261, 278, 291,
   7, 22, 37, 52, 67, 82,  97, 112, 127, 142, 157, 172, 187, 202, 217, 232, 247, 262, 277, 292,
   6, 23, 36, 53, 66, 83,  96, 113, 126, 143, 156, 173, 186, 203, 216, 233, 246, 263, 276, 293,
   5, 24, 35, 54, 65, 84,  95, 114, 125, 144, 155, 174, 185, 204, 215, 234, 245, 264, 275, 294,
   4, 25, 34, 55, 64, 85,  94, 115, 124, 145, 154, 175, 184, 205, 214, 235, 244, 265, 274, 295,
   3, 26, 33, 56, 63, 86,  93, 116, 123, 146, 153, 176, 183, 206, 213, 236, 243, 266, 273, 296,
   2, 27, 32, 57, 62, 87,  92, 117, 122, 147, 152, 177, 182, 207, 212, 237, 242, 267, 272, 297,
   1, 28, 31, 58, 61, 88,  91, 118, 121, 148, 151, 178, 181, 208, 211, 238, 241, 268, 271, 298,
   0, 29, 30, 59, 60, 89,  90, 119, 120, 149, 150, 179, 180, 209, 210, 239, 240, 269, 270, 299,
};
bool pixelXYValid(int x, int y) {
  if (x < 0 || y < 0 || x > 19 || y > 14) {
    return false;
  }
  return true;
}

int indexFromXY(int x, int y) {
  if (!pixelXYValid(x, y)) {
    return -1; // Return -1 to indicate an unexisting pixel
  }
  return ledNumMap[y * 20 + x];
}
void setPixel(int index, CRGB color) {
  if (index >= 0 && index < NUM_LEDS) {
    leds[index] = color;
  }
}
void setPixelXY(int x, int y, CRGB color) {
  int index = indexFromXY(x, y);
  if (index >= 0) {
    setPixel(index, color);
  }
}
// функция получения цвета пикселя по его номеру
CRGB getPixel(int index) {
  if (index == -1) return CRGB::Black;
  return leds[index];
}

// функция получения цвета пикселя в матрице по его координатам
CRGB getPixelXY(int x, int y) {
  return getPixel(indexFromXY(x, y));
}